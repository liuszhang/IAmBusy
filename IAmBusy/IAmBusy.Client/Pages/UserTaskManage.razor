@page "/task"

<PageTitle>任务管理</PageTitle>

@using IAmBusy.Client.Components
@using IAmBusy.Model.ApiClient
@using IAmBusy.Model.Models

@inject MainApiClient MainApiClient
@inject IDialogService DialogService


<MudDataGrid T="UserTask" Items="@UserTasks" Striped="true" Hover="true" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">任务管理(@UserTasks?.Count)</MudText>
        <MudSpacer />
        <MudButton OnClick="CreateUserTask" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">添加任务</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="d=>d.Id" Title="ID" />
        <PropertyColumn Property="d => d.Name" Title="任务名称" />
        <PropertyColumn Property="d => d.Description" Title="任务描述" />
        <PropertyColumn Property="d => d.StartTime" Title="开始时间" />
        <PropertyColumn Property="d => d.EndTime" Title="结束时间" />
        <PropertyColumn Property="d => d.UserName" Title="责任人" />
        <TemplateColumn T="UserTask" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton OnClick="()=>DeleteUserTask(context.Item)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>



@code {
    private List<UserTask>? UserTasks { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserTasks();
        }
    }

    private async Task LoadUserTasks()
    {
        UserTasks = await MainApiClient.GetAllTasks();
        // 确保在 UI 线程上调用 StateHasChanged()
        await InvokeAsync(StateHasChanged);
    }


    private async Task CreateUserTask()
    {
        var dialog = await DialogService.ShowAsync<NewUserTaskDialog>("创建任务");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            //await LoadDepartments();
            UserTasks.Add((UserTask)result.Data);
        }
    }


    private async Task DeleteUserTask(UserTask userTask)
    {
        await MainApiClient.DeleteUserTask(userTask.Id);
        //await LoadDepartments();
        UserTasks.Remove(userTask);
    }
}
